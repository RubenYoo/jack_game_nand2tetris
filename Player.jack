
class Player {
	field int xPos;
	field int yPos;
	field int yVel;
	field boolean gravity; 
	field boolean on_jump;
	field boolean touched;
	field int counter;
	field boolean dead;

	constructor Player new(int x, int y) {
		let xPos = x;
		let yPos = y;
		let yVel = 10;
		let gravity = true;
		let on_jump = false;
		let touched = false;
		let dead = false;
		let counter = (yVel * 10);
		return this;
    }

	method void dispose() {
		do Memory.deAlloc(this);
		return;
    }

	method void move_left() {
		if(xPos > (yVel + 5)) {
			let xPos = xPos - 5;
		}
		return;
    }
	
	method void move_right() {
		if(xPos < (512 - yVel - 5)) {
			let xPos = xPos + 5;
		}
		return;
    }
	

	method void movement() {
		//check if should jump on
		
		if(touched){
			
			if(counter < 0) {
				let counter = (yVel * 10);
				let touched = false;
				let on_jump = false;
				//do Draw.debug2(false);
				return;
			}
			
			if(yPos < (yVel + 10)) {
				let counter = (yVel * 10);
				let touched = false;
				let on_jump = false;
				//do Draw.debug2(false);
				return;
			}
			
			let on_jump = true;
			let yPos = yPos - yVel;
			let counter = counter - yVel;
			
			return;
		}
		
		
		if (~on_jump ) {
			if (yPos < (256 - 10 - yVel)) {
               let yPos = yPos + yVel;
            }
			else {
				let dead = true;
				let on_jump = true;
			}
        } 
		
		else {
			if (yPos > 128) {
               let yPos = yPos - yVel;
            }
			else {
				let on_jump = false;
			}
		}
		
		return;
   }
	
	method void render() {
		do Draw.draw_player(xPos, yPos);
		return;
	}

	method void update() {
		do movement();
		do render();
		return;
	}

	method int x() {
		return xPos;
	}

	method int y() {
		return yPos;
	}
	
	method boolean is_dead() {
		return dead;
	}
	
	method boolean can_hit() {
		return ~on_jump;
	}
	
	method void touched() {
		let touched = true;
		//do Draw.debug2(true);
		return;
	}
}

class Game {
	
	field Player player;
	field char key;
	field boolean exit;
	field Array platforms;
	field int length_platforms;
	field Score score;
	field boolean game_on; 
	

	constructor Game new() {
		let player = Player.new(256, 128);
		let key = 0;
		let length_platforms = 5;
		let platforms = Array.new(length_platforms);
		let exit = false;
		let score = Score.new();
		let game_on = true;
		do Draw.init();
		
		// need to randomize positions
		let platforms[0] = Platform.new(350, 200);
		let platforms[1] = Platform.new(300, 250);
		let platforms[2] = Platform.new(275, 180);
		let platforms[3] = Platform.new(400, 139);
		let platforms[4] = Platform.new(100, 170);
		
		return this;
	}
	
	
	method void create_platforms(){
		var int randvar;
		let randvar = Random.randRange(7,0);
		if (randvar = 0){
			let randvar = 5;
		} 
		while (randvar > -1){
			let platforms[randvar] = Platform.new(Random.randRange(250,11), Random.randRange(250,101));
			let randvar = randvar-1;
		}
		return;
	
	}
	
	
	method void handle_input() {
		let key = Keyboard.keyPressed();
		
		// left arrow
		if (key = 130) { 
			do player.move_left();
		}
		// right arrow
		if (key = 132) { 
			do player.move_right();
		}

		return;
   }
	method void advance() {
		var int i;
		var Platform current;
		let i = 0;
		
		do Screen.clearScreen();
		
		do player.update();
		do score.render();
		
		while(i < length_platforms) {
			
			let current = platforms[i];
			do current.render();
			let i = i + 1;
		}
		
		return;
	}
	
	method boolean check_landing() {
		var int i, xPlat, yPlat, xPlay, yPlay;
		var boolean can_land;
		var Platform current;
		
		let i = 0;
		let can_land = player.can_hit();
		
		/*if(~can_land) {
			return;
		}*/
		
		while(i < length_platforms) {
			
			let current = platforms[i];
			let xPlay = player.x();
			let yPlay = player.y();
			let xPlat = current.x();
			let yPlat = current.y();
			
			//  check if the player landed on the platform
			// this is working great currently
			if ((yPlay + 10) = (yPlat - 2)) {
				if ((xPlay - 8) < (xPlat)) {
					if ((xPlay + 8) > (xPlat)) {
						if(~can_land){
							return false;
						}
						do player.touched();
						do score.increment_score();
						
					}
				}
	
			}
			
			let i = i + 1;
		}
		
		return true;
	}
	
	method boolean run() {		
		
		while (~exit) {
			do handle_input();
			do advance();
			let game_on = check_landing();
			if (~game_on){
				return false;
			}
			do Sys.wait(100);
			
		}
		
		return true;
	}
	
	method void dispose() {
		do player.dispose();
		do platforms.dispose();
		do score.dispose();
		do Memory.deAlloc(this);
		return;
    }
}